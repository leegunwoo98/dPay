{"ast":null,"code":"\nimport react from \"react\";\nexport var validateUsername = function validateUsername(username) {\n  if (username.length === 0) {\n    return \"Username cannot be empty\";\n  }\n  if (username.length < 5) {\n    return \"Username must be at least 5 characters\";\n  }\n  if (username.length > 20) {\n    return \"Username cannot be more than 20 characters\";\n  }\n  if (username.match(/^[a-zA-Z0-9]+$/)) {\n    return \"Username cannot contain special characters\";\n  }\n  return null;\n};\nexport var validatePassword = function validatePassword(password) {\n  if (password.length === 0) {\n    return \"Password cannot be empty\";\n  }\n  if (password.length < 5) {\n    return \"Password must be at least 5 characters\";\n  }\n  if (password.length > 20) {\n    return \"Password cannot be more than 20 characters\";\n  }\n  if (password.match(/^[a-zA-Z0-9]+$/)) {\n    return \"Password cannot contain special characters\";\n  }\n  return null;\n};\nexport var validateEmail = function validateEmail(email) {};","map":{"version":3,"names":["react","validateUsername","username","length","match","validatePassword","password","validateEmail","email"],"sources":["/Users/gunwoo/Library/CloudStorage/OneDrive-Personal/College/2022Fall/hackathon/dPay/client/Login/Validation.js"],"sourcesContent":["\n//create a group of functions that can be used to validate the user input\n// Path: client/Validation.js\nimport react from \"react\"\n//create a function that can be used to validate the username\nexport const validateUsername = (username) => {\n    //check if the username is empty\n    if (username.length === 0) {\n        return \"Username cannot be empty\"\n    }\n    //check if the username is less than 5 characters\n    if (username.length < 5) {\n        return \"Username must be at least 5 characters\"\n    }\n    //check if the username is more than 20 characters\n    if (username.length > 20) {\n        return \"Username cannot be more than 20 characters\"\n    }\n    //check if the username contains any special characters\n    if (username.match(/^[a-zA-Z0-9]+$/)) {\n        return \"Username cannot contain special characters\"\n    }\n    //return null if the username is valid\n    return null\n}\n//create a function that can be used to validate the password\nexport const validatePassword = (password) => {\n    //check if the password is empty\n    if (password.length === 0) {\n        return \"Password cannot be empty\"\n    }\n    //check if the password is less than 5 characters\n    if (password.length < 5) {\n        return \"Password must be at least 5 characters\"\n    }\n    //check if the password is more than 20 characters\n    if (password.length > 20) {\n        return \"Password cannot be more than 20 characters\"\n    }\n    //check if the password contains any special characters\n    if (password.match(/^[a-zA-Z0-9]+$/)) {\n        return \"Password cannot contain special characters\"\n    }\n    //return null if the password is valid\n    return null\n}\nexport const validateEmail = (email) => {\n    \n}\n"],"mappings":";AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,QAAQ,EAAK;EAE1C,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,0BAA0B;EACrC;EAEA,IAAID,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO,wCAAwC;EACnD;EAEA,IAAID,QAAQ,CAACC,MAAM,GAAG,EAAE,EAAE;IACtB,OAAO,4CAA4C;EACvD;EAEA,IAAID,QAAQ,CAACE,KAAK,CAAC,gBAAgB,CAAC,EAAE;IAClC,OAAO,4CAA4C;EACvD;EAEA,OAAO,IAAI;AACf,CAAC;AAED,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,QAAQ,EAAK;EAE1C,IAAIA,QAAQ,CAACH,MAAM,KAAK,CAAC,EAAE;IACvB,OAAO,0BAA0B;EACrC;EAEA,IAAIG,QAAQ,CAACH,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO,wCAAwC;EACnD;EAEA,IAAIG,QAAQ,CAACH,MAAM,GAAG,EAAE,EAAE;IACtB,OAAO,4CAA4C;EACvD;EAEA,IAAIG,QAAQ,CAACF,KAAK,CAAC,gBAAgB,CAAC,EAAE;IAClC,OAAO,4CAA4C;EACvD;EAEA,OAAO,IAAI;AACf,CAAC;AACD,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAa,CAAIC,KAAK,EAAK,CAExC,CAAC"},"metadata":{},"sourceType":"module"}